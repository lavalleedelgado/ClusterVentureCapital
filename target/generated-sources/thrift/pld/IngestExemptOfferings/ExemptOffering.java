/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pld.IngestExemptOfferings;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-12")
public class ExemptOffering implements org.apache.thrift.TBase<ExemptOffering, ExemptOffering._Fields>, java.io.Serializable, Cloneable, Comparable<ExemptOffering> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExemptOffering");

  private static final org.apache.thrift.protocol.TField CIK_FIELD_DESC = new org.apache.thrift.protocol.TField("cik", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("entity", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CENSUS_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("census_year", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zip_code", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CLUSTER_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cluster_label", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExemptOfferingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExemptOfferingTupleSchemeFactory();

  public long cik; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String entity; // required
  public short census_year; // required
  public short year; // required
  public byte month; // required
  public byte day; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String zip_code; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String cluster_label; // required
  public double amount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CIK((short)1, "cik"),
    ENTITY((short)2, "entity"),
    CENSUS_YEAR((short)3, "census_year"),
    YEAR((short)4, "year"),
    MONTH((short)5, "month"),
    DAY((short)6, "day"),
    ZIP_CODE((short)7, "zip_code"),
    CLUSTER_LABEL((short)8, "cluster_label"),
    AMOUNT((short)9, "amount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CIK
          return CIK;
        case 2: // ENTITY
          return ENTITY;
        case 3: // CENSUS_YEAR
          return CENSUS_YEAR;
        case 4: // YEAR
          return YEAR;
        case 5: // MONTH
          return MONTH;
        case 6: // DAY
          return DAY;
        case 7: // ZIP_CODE
          return ZIP_CODE;
        case 8: // CLUSTER_LABEL
          return CLUSTER_LABEL;
        case 9: // AMOUNT
          return AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CIK_ISSET_ID = 0;
  private static final int __CENSUS_YEAR_ISSET_ID = 1;
  private static final int __YEAR_ISSET_ID = 2;
  private static final int __MONTH_ISSET_ID = 3;
  private static final int __DAY_ISSET_ID = 4;
  private static final int __AMOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CIK, new org.apache.thrift.meta_data.FieldMetaData("cik", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENTITY, new org.apache.thrift.meta_data.FieldMetaData("entity", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CENSUS_YEAR, new org.apache.thrift.meta_data.FieldMetaData("census_year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zip_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_LABEL, new org.apache.thrift.meta_data.FieldMetaData("cluster_label", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExemptOffering.class, metaDataMap);
  }

  public ExemptOffering() {
  }

  public ExemptOffering(
    long cik,
    java.lang.String entity,
    short census_year,
    short year,
    byte month,
    byte day,
    java.lang.String zip_code,
    java.lang.String cluster_label,
    double amount)
  {
    this();
    this.cik = cik;
    setCikIsSet(true);
    this.entity = entity;
    this.census_year = census_year;
    setCensus_yearIsSet(true);
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.day = day;
    setDayIsSet(true);
    this.zip_code = zip_code;
    this.cluster_label = cluster_label;
    this.amount = amount;
    setAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExemptOffering(ExemptOffering other) {
    __isset_bitfield = other.__isset_bitfield;
    this.cik = other.cik;
    if (other.isSetEntity()) {
      this.entity = other.entity;
    }
    this.census_year = other.census_year;
    this.year = other.year;
    this.month = other.month;
    this.day = other.day;
    if (other.isSetZip_code()) {
      this.zip_code = other.zip_code;
    }
    if (other.isSetCluster_label()) {
      this.cluster_label = other.cluster_label;
    }
    this.amount = other.amount;
  }

  public ExemptOffering deepCopy() {
    return new ExemptOffering(this);
  }

  @Override
  public void clear() {
    setCikIsSet(false);
    this.cik = 0;
    this.entity = null;
    setCensus_yearIsSet(false);
    this.census_year = 0;
    setYearIsSet(false);
    this.year = 0;
    setMonthIsSet(false);
    this.month = 0;
    setDayIsSet(false);
    this.day = 0;
    this.zip_code = null;
    this.cluster_label = null;
    setAmountIsSet(false);
    this.amount = 0.0;
  }

  public long getCik() {
    return this.cik;
  }

  public ExemptOffering setCik(long cik) {
    this.cik = cik;
    setCikIsSet(true);
    return this;
  }

  public void unsetCik() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CIK_ISSET_ID);
  }

  /** Returns true if field cik is set (has been assigned a value) and false otherwise */
  public boolean isSetCik() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CIK_ISSET_ID);
  }

  public void setCikIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CIK_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEntity() {
    return this.entity;
  }

  public ExemptOffering setEntity(@org.apache.thrift.annotation.Nullable java.lang.String entity) {
    this.entity = entity;
    return this;
  }

  public void unsetEntity() {
    this.entity = null;
  }

  /** Returns true if field entity is set (has been assigned a value) and false otherwise */
  public boolean isSetEntity() {
    return this.entity != null;
  }

  public void setEntityIsSet(boolean value) {
    if (!value) {
      this.entity = null;
    }
  }

  public short getCensus_year() {
    return this.census_year;
  }

  public ExemptOffering setCensus_year(short census_year) {
    this.census_year = census_year;
    setCensus_yearIsSet(true);
    return this;
  }

  public void unsetCensus_year() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CENSUS_YEAR_ISSET_ID);
  }

  /** Returns true if field census_year is set (has been assigned a value) and false otherwise */
  public boolean isSetCensus_year() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CENSUS_YEAR_ISSET_ID);
  }

  public void setCensus_yearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CENSUS_YEAR_ISSET_ID, value);
  }

  public short getYear() {
    return this.year;
  }

  public ExemptOffering setYear(short year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public byte getMonth() {
    return this.month;
  }

  public ExemptOffering setMonth(byte month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  public byte getDay() {
    return this.day;
  }

  public ExemptOffering setDay(byte day) {
    this.day = day;
    setDayIsSet(true);
    return this;
  }

  public void unsetDay() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
  }

  public void setDayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getZip_code() {
    return this.zip_code;
  }

  public ExemptOffering setZip_code(@org.apache.thrift.annotation.Nullable java.lang.String zip_code) {
    this.zip_code = zip_code;
    return this;
  }

  public void unsetZip_code() {
    this.zip_code = null;
  }

  /** Returns true if field zip_code is set (has been assigned a value) and false otherwise */
  public boolean isSetZip_code() {
    return this.zip_code != null;
  }

  public void setZip_codeIsSet(boolean value) {
    if (!value) {
      this.zip_code = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCluster_label() {
    return this.cluster_label;
  }

  public ExemptOffering setCluster_label(@org.apache.thrift.annotation.Nullable java.lang.String cluster_label) {
    this.cluster_label = cluster_label;
    return this;
  }

  public void unsetCluster_label() {
    this.cluster_label = null;
  }

  /** Returns true if field cluster_label is set (has been assigned a value) and false otherwise */
  public boolean isSetCluster_label() {
    return this.cluster_label != null;
  }

  public void setCluster_labelIsSet(boolean value) {
    if (!value) {
      this.cluster_label = null;
    }
  }

  public double getAmount() {
    return this.amount;
  }

  public ExemptOffering setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CIK:
      if (value == null) {
        unsetCik();
      } else {
        setCik((java.lang.Long)value);
      }
      break;

    case ENTITY:
      if (value == null) {
        unsetEntity();
      } else {
        setEntity((java.lang.String)value);
      }
      break;

    case CENSUS_YEAR:
      if (value == null) {
        unsetCensus_year();
      } else {
        setCensus_year((java.lang.Short)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((java.lang.Short)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((java.lang.Byte)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((java.lang.Byte)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZip_code();
      } else {
        setZip_code((java.lang.String)value);
      }
      break;

    case CLUSTER_LABEL:
      if (value == null) {
        unsetCluster_label();
      } else {
        setCluster_label((java.lang.String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CIK:
      return getCik();

    case ENTITY:
      return getEntity();

    case CENSUS_YEAR:
      return getCensus_year();

    case YEAR:
      return getYear();

    case MONTH:
      return getMonth();

    case DAY:
      return getDay();

    case ZIP_CODE:
      return getZip_code();

    case CLUSTER_LABEL:
      return getCluster_label();

    case AMOUNT:
      return getAmount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CIK:
      return isSetCik();
    case ENTITY:
      return isSetEntity();
    case CENSUS_YEAR:
      return isSetCensus_year();
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DAY:
      return isSetDay();
    case ZIP_CODE:
      return isSetZip_code();
    case CLUSTER_LABEL:
      return isSetCluster_label();
    case AMOUNT:
      return isSetAmount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExemptOffering)
      return this.equals((ExemptOffering)that);
    return false;
  }

  public boolean equals(ExemptOffering that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cik = true;
    boolean that_present_cik = true;
    if (this_present_cik || that_present_cik) {
      if (!(this_present_cik && that_present_cik))
        return false;
      if (this.cik != that.cik)
        return false;
    }

    boolean this_present_entity = true && this.isSetEntity();
    boolean that_present_entity = true && that.isSetEntity();
    if (this_present_entity || that_present_entity) {
      if (!(this_present_entity && that_present_entity))
        return false;
      if (!this.entity.equals(that.entity))
        return false;
    }

    boolean this_present_census_year = true;
    boolean that_present_census_year = true;
    if (this_present_census_year || that_present_census_year) {
      if (!(this_present_census_year && that_present_census_year))
        return false;
      if (this.census_year != that.census_year)
        return false;
    }

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (this.month != that.month)
        return false;
    }

    boolean this_present_day = true;
    boolean that_present_day = true;
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (this.day != that.day)
        return false;
    }

    boolean this_present_zip_code = true && this.isSetZip_code();
    boolean that_present_zip_code = true && that.isSetZip_code();
    if (this_present_zip_code || that_present_zip_code) {
      if (!(this_present_zip_code && that_present_zip_code))
        return false;
      if (!this.zip_code.equals(that.zip_code))
        return false;
    }

    boolean this_present_cluster_label = true && this.isSetCluster_label();
    boolean that_present_cluster_label = true && that.isSetCluster_label();
    if (this_present_cluster_label || that_present_cluster_label) {
      if (!(this_present_cluster_label && that_present_cluster_label))
        return false;
      if (!this.cluster_label.equals(that.cluster_label))
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cik);

    hashCode = hashCode * 8191 + ((isSetEntity()) ? 131071 : 524287);
    if (isSetEntity())
      hashCode = hashCode * 8191 + entity.hashCode();

    hashCode = hashCode * 8191 + census_year;

    hashCode = hashCode * 8191 + year;

    hashCode = hashCode * 8191 + (int) (month);

    hashCode = hashCode * 8191 + (int) (day);

    hashCode = hashCode * 8191 + ((isSetZip_code()) ? 131071 : 524287);
    if (isSetZip_code())
      hashCode = hashCode * 8191 + zip_code.hashCode();

    hashCode = hashCode * 8191 + ((isSetCluster_label()) ? 131071 : 524287);
    if (isSetCluster_label())
      hashCode = hashCode * 8191 + cluster_label.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

    return hashCode;
  }

  @Override
  public int compareTo(ExemptOffering other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCik()).compareTo(other.isSetCik());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCik()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cik, other.cik);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEntity()).compareTo(other.isSetEntity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity, other.entity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCensus_year()).compareTo(other.isSetCensus_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCensus_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.census_year, other.census_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZip_code()).compareTo(other.isSetZip_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZip_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zip_code, other.zip_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCluster_label()).compareTo(other.isSetCluster_label());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCluster_label()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cluster_label, other.cluster_label);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExemptOffering(");
    boolean first = true;

    sb.append("cik:");
    sb.append(this.cik);
    first = false;
    if (!first) sb.append(", ");
    sb.append("entity:");
    if (this.entity == null) {
      sb.append("null");
    } else {
      sb.append(this.entity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("census_year:");
    sb.append(this.census_year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    sb.append(this.month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("day:");
    sb.append(this.day);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zip_code:");
    if (this.zip_code == null) {
      sb.append("null");
    } else {
      sb.append(this.zip_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cluster_label:");
    if (this.cluster_label == null) {
      sb.append("null");
    } else {
      sb.append(this.cluster_label);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'cik' because it's a primitive and you chose the non-beans generator.
    if (entity == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'entity' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'census_year' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'year' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'month' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'day' because it's a primitive and you chose the non-beans generator.
    if (zip_code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'zip_code' was not present! Struct: " + toString());
    }
    if (cluster_label == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cluster_label' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExemptOfferingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExemptOfferingStandardScheme getScheme() {
      return new ExemptOfferingStandardScheme();
    }
  }

  private static class ExemptOfferingStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExemptOffering> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExemptOffering struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CIK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cik = iprot.readI64();
              struct.setCikIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.entity = iprot.readString();
              struct.setEntityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CENSUS_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.census_year = iprot.readI16();
              struct.setCensus_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.year = iprot.readI16();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.month = iprot.readByte();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.day = iprot.readByte();
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zip_code = iprot.readString();
              struct.setZip_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLUSTER_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cluster_label = iprot.readString();
              struct.setCluster_labelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCik()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'cik' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCensus_year()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'census_year' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'year' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'month' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDay()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'day' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExemptOffering struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CIK_FIELD_DESC);
      oprot.writeI64(struct.cik);
      oprot.writeFieldEnd();
      if (struct.entity != null) {
        oprot.writeFieldBegin(ENTITY_FIELD_DESC);
        oprot.writeString(struct.entity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CENSUS_YEAR_FIELD_DESC);
      oprot.writeI16(struct.census_year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI16(struct.year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeByte(struct.month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DAY_FIELD_DESC);
      oprot.writeByte(struct.day);
      oprot.writeFieldEnd();
      if (struct.zip_code != null) {
        oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.zip_code);
        oprot.writeFieldEnd();
      }
      if (struct.cluster_label != null) {
        oprot.writeFieldBegin(CLUSTER_LABEL_FIELD_DESC);
        oprot.writeString(struct.cluster_label);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExemptOfferingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExemptOfferingTupleScheme getScheme() {
      return new ExemptOfferingTupleScheme();
    }
  }

  private static class ExemptOfferingTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExemptOffering> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExemptOffering struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.cik);
      oprot.writeString(struct.entity);
      oprot.writeI16(struct.census_year);
      oprot.writeI16(struct.year);
      oprot.writeByte(struct.month);
      oprot.writeByte(struct.day);
      oprot.writeString(struct.zip_code);
      oprot.writeString(struct.cluster_label);
      oprot.writeDouble(struct.amount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExemptOffering struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.cik = iprot.readI64();
      struct.setCikIsSet(true);
      struct.entity = iprot.readString();
      struct.setEntityIsSet(true);
      struct.census_year = iprot.readI16();
      struct.setCensus_yearIsSet(true);
      struct.year = iprot.readI16();
      struct.setYearIsSet(true);
      struct.month = iprot.readByte();
      struct.setMonthIsSet(true);
      struct.day = iprot.readByte();
      struct.setDayIsSet(true);
      struct.zip_code = iprot.readString();
      struct.setZip_codeIsSet(true);
      struct.cluster_label = iprot.readString();
      struct.setCluster_labelIsSet(true);
      struct.amount = iprot.readDouble();
      struct.setAmountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

